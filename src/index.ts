import './style.scss';

// //-- Ejercicios entregables ****************************************
// // 1. Array operations
// // 1.1.- Funci칩n Head. Implementa una funci칩n head (inmutable), tal que, dado un array como entrada extraiga y devuelva su primer elemento. Utiliza destructuring.

const family = ["Juan Carlos", "Laura", "Chloe"];

const head = (arr) =>{ 
  const [first] = arr;
  return first;
};

console.log(`1.1.- Con la funci칩n head extraemos el primer elemento del array:`);
console.log(head(family));

//  // 1.2.- Funci칩n Tail. Implementa una funci칩n tail (inmutable), tal que, dado un array como entrada devuelta todos menos el primer elemento. Utiliza rest operator.

const tail = ([,...arr]) => {
    
    return arr;
};

console.log(`+--------------------------------------------------------+`);
console.log(`1.2.- Con la funci칩n tail extraemos todos los elementos del array menos el primero:`);
console.log(tail(family));

// // 1.3.- Funci칩n Init. Implementa una funci칩n init(inmutable), tal que, dado un array como entrada devuelva todos los elementos menos el 칰ltimo. Utiliza los m칠todos que ofrece Array.prototype

const init = (arr) => {
    const [...newArray] = arr;
    newArray.pop();
    return newArray;
};

console.log(`+--------------------------------------------------------+`);
console.log(`1.3.- Con la funci칩n init extraemos todos los elementos del array menos el 칰ltimo:`);
console.log(init(family));

// // 1.4.- Funci칩n Last. Implementa una funci칩n last (inmutable), tal que, dado un array como entrada devuelva el 칰ltimo elemento.

const last = (arr) => {
    
    const [...newArray] = arr;
    
    return newArray.pop();
};

console.log(`+--------------------------------------------------------+`);
console.log(`1.4.- Con la funci칩n last extraemos el 칰ltimo elemento del array:`);
console.log(last(family));

// //EJERCICIO 2 -- CONCAT
// // 2.- Implementa una funci칩n concat (inmutable) tal que, dados 2 arrays como entrada, devuelva la concatenaci칩n de ambos. Utiliza rest / spread operators.

const family2 = ["Juan", "Teresa", "Mari Carmen"]

const concat = (a, b) => {
    
    return [...a, ...b];
    
};

console.log(`+--------------------------------------------------------+`);
console.log(`2.- Con la funci칩n concat concatenamos dos arrays en uno:`);
console.log(concat(family, family2));
console.log(`Comprobamos que el array original sigue inmutable:`)
console.log(family);

// //EJERCICIO 3 -- CLONE MERGE
// // 3.1.- Clone.- mplementa una funci칩n clone que, a partir de un objeto de entrada source devuelva un nuevo objeto con las propiedades de source.

const person = {
    name: "Juan Carlos",
    surname: "Fuentes",
    age: "49",
};

function clone(source) {
    
    return {...source}
};

const newPerson = clone(person);

console.log(`+--------------------------------------------------------+`);
console.log(`3.1.- Vemos que hemos clonado el objeto:`);
console.log(newPerson);
console.log(`Y comprobamos que cada uno apunta a una referencia distinta, por eso no son iguales:`);
console.log(newPerson === person);

// // 3.2.- Merge.- Implementa una funci칩n merge que, dados dos objetos de entrada source y target, devuelva un nuevo objeto con todas las propiedades de target y de source, y en caso de propiedades con el mismo nombre, source sobreescribe a target

const a = { name: "Maria", surname: "Iba침ez", country: "SPA" };
const b = { name: "Luisa", age: 31, married: true };

function merge(source, target) {
    return {...target, ...source}
};

console.log(`+--------------------------------------------------------+`);
console.log(`3.2.- Vemos un solo objeto en el que el source sobreescribe los elementos repetidos sobre el target:`);
console.log(merge(a, b));

// //EJERCICIO 4 -- READ BOOKS
// // 4.- Crea una funci칩n isBookRead que reciba una lista de libros y un t칤tulo y devuelva si se ha le칤do o no dicho libro. Un libro es un objeto con title como string y isRead como booleano. En caso de no existir el libro devolver false TIP: Existe un m칠todo de Array.prototype que te ayudar치 a buscar seg칰n un patr칩n.

class Book {
    title: string;
    isRead: boolean;
    constructor (title: string, isRead: boolean){
        this.title = title;
        this.isRead = isRead;
    }
}

// Esta ser칤a la clase en vanilla JS
// class Book {
//     constructor(title, isRead){
//       this.title = title,
//       this.isRead = isRead
//     }
// }
        
const books: Book[] = [
    new Book('Harry Potter y la piedra filosofal', true),
    new Book('Canci칩n de hielo y fuego', false),
    new Book('Devastaci칩n', true),
];

function isBookRead(books: Book[], titleToTest: string): string | boolean{
    let bookReaded = books.filter(b => b.title === titleToTest);
    
    if (bookReaded.length == 0)
        return false;
    else 
        return bookReaded[0].isRead ? `El libro ${bookReaded[0].title} ha sido le칤do` : `El libro ${bookReaded[0].title} no se ha le칤do`;
    
}

// Esta ser칤a la funci칩n en vanilla JS
// function isBookRead(books, titleToSearch) {
//     let bookReaded = books.filter(b => b.title === titleToSearch);
//     if (bookReaded.length == 0)
//       return false;
//     else
//       return bookReaded[0].isRead ? `El libro ${bookReaded[0].title} ha sido le칤do` : `El libro ${bookReaded[0].title} no se ha le칤do`
// }
    
console.log(`+--------------------------------------------------------+`);
console.log(`4.- Comprobaciones de la funci칩n isBookRead`)
console.log(isBookRead(books, 'Harry Potter y la piedra filosofal'));
console.log(isBookRead(books, 'Canci칩n de hielo y fuego'));
console.log(isBookRead(books, 'Devastaci칩n'));
console.log(isBookRead(books, "Los Pilares de la Tierra"));

// //EJERCICIO 5 -- SLOT MACHINE
// // 5.- El objetivo de este ejercicio es crear una m치quina tragaperras utilizando clases donde cada vez que juguemos insertemos una moneda. Cada m치quina tragaperras (instancia) tendr치 un contador de monedas que autom치ticamente se ir치 incrementando conforme vayamos jugando. Cuando se llame al m칠todo play el n칰mero de monedas se debe incrementar de forma autom치tica y debe generar tres booleanos aleatorios que representar치n el estado de las 3 ruletas. El usuario habr치 ganado en caso de que los tres booleanos sean true, y por tanto deber치 mostrarse por consola el mensaje: "Congratulations!!!. You won <n칰mero de monedas> coins!!"; y reiniciar las monedas almacenadas, ya que las hemos conseguido y han salido de la m치quina. En caso contrario deber치 mostrar otro mensaje: "Good luck next time!!".

class SlotMachine {

    private _coins = 0;
    items: Array<boolean> = [];

    play(): void{
        this._coins += 1;
        this.items[0] = this.randomBool();
        this.items[1] = this.randomBool();
        this.items[2] = this.randomBool();
    };

    get balance(): number {
        return this._coins;
    };

    set resetCoins(value: number){
        this._coins = value;
    };

    randomBool(): boolean {
        return Boolean(Math.round(Math.random()));
    };
};

const machine = new SlotMachine();
  
let $div1 = document.getElementById('item1');
let $div2 = document.getElementById('item2');
let $div3 = document.getElementById('item3');
let $message = document.getElementById('message');
let $coins = document.getElementById('coins');

$coins!.innerText = `${machine.balance.toString()} Coins`;
$message!.innerText = `Waiting for players`;

const showResult = (machine: SlotMachine): void => {
 
    $div1!.innerHTML = machine.items[0] ? '游꼞' : '游꼛';
    $div2!.innerHTML = machine.items[1] ? '游꼞' : '游꼛';
    $div3!.innerHTML = machine.items[2] ? '游꼞' : '游꼛';

    if (machine.items[0] === machine.items[1] && machine.items[0] === machine.items[2]){
        $message!.innerText = `Congratulations!!!. You won ${machine.balance} coins!!`;
        machine.resetCoins = 0;
    }else {
        $message!.innerText = `Good luck next time!`;
    };

    $coins!.innerText = `${machine.balance.toString()} Coins`;
};

document.getElementById('throw')!.addEventListener('click', () =>{
    machine.play();
    showResult(machine);
});